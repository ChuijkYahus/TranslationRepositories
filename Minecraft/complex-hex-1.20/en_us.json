{
  "complexhex.entry.complexities": "Complexities",
  "hexcasting.action.complexhex:const/complex/i": "Constant Imagination",
  "complexhex.page.complexities.const.i": "Pushes 0 + 1i to the stack.",
  "hexcasting.action.complexhex:const/complex/1": "Constant Realisation",
  "complexhex.page.complexities.const.1": "Pushes 1 + 0i to the stack.",
  "complexhex.page.complexities.add": "Preforms Addition, num will be treated as num + 0i.",
  "complexhex.page.complexities.sub": "Preforms Subtraction, num will be treated as num + 0i.",
  "complexhex.page.complexities.mul": "Preforms Scalar Multiplication.",
  "complexhex.page.complexities.div": "Preforms Scalar Division.",
  "complexhex.page.complexities.abs": "Pushes the Argument (the length).",
  "hexcasting.action.complexhex:cmul": "Complex Multiplication",
  "complexhex.page.complexities.cmul": "Preforms Complex Multiplication.",
  "hexcasting.action.complexhex:real": "Realising Complexities",
  "complexhex.page.complexities.real": "Pushes the real coefficient.",
  "hexcasting.action.complexhex:imaginary": "Imagining Complexities",
  "complexhex.page.complexities.imaginary": "Pushes the imaginary coefficient.",
  "hexcasting.action.complexhex:conjugate": "Conjugation Prfn.",
  "complexhex.page.complexities.conjugate": "Negates the imaginary coefficient of the topmost iota",

  "complexhex.entry.quaternionics": "Quaternionics",
  "hexcasting.action.complexhex:qmake": "Quaternionic Exal.",
  "complexhex.page.quaternionics.qmake": "Pushes a Quaternion with num as the real coefficient and the vector's x, y, & z as the coefficients of i, j & k respectively.",
  "hexcasting.action.complexhex:qunmake": "Quaternionic Dntg.",
  "complexhex.page.quaternionics.qunmake": "Pushes the real coefficient and a vector where the x, y, & z components are the coefficients of i, j, & k respectively.",
  "hexcasting.action.complexhex:const/quaternion/1": "Quaternionic Rfln.: 1",
  "complexhex.page.quaternionics.const.1": "Pushes 1 + 0i + 0j + 0k to the stack.",
  "hexcasting.action.complexhex:const/quaternion/i": "Quaternionic Rfln.: i",
  "complexhex.page.quaternionics.const.i": "Pushes 0 + 1i + 0j + 0k to the stack.",
  "hexcasting.action.complexhex:const/quaternion/j": "Quaternionic Rfln: j",
  "complexhex.page.quaternionics.const.j": "Pushes 0 + 0i + 1j + 0k to the stack.",
  "hexcasting.action.complexhex:const/quaternion/k": "Quaternionic Rfln: k",
  "complexhex.page.quaternionics.const.k": "Pushes 0 + 0i + 0j + 1k to the stack.",
  "complexhex.page.quaternionics.add": "Preforms Addition",
  "complexhex.page.quaternionics.sub": "Preforms Subtraction",
  "complexhex.page.quaternionics.mul": "Preforms Scalar Multiplication.",
  "complexhex.page.quaternionics.div": "Preforms Scalar Division.",
  "complexhex.page.quaternionics.abs": "Pushes the Argument (the length).",
  "hexcasting.action.complexhex:qmul": "Quaternionic Multiplication",
  "complexhex.page.quaternionics.qmul": "Preforms a Hamiltonian Multiplication.",
  "hexcasting.action.complexhex:qw": "Quaterionic Prfn.: 1",
  "complexhex.page.quaternionics.qw": "Pushes the coefficient of 1.",
  "hexcasting.action.complexhex:qx": "Quaterionic Prfn.: i",
  "complexhex.page.quaternionics.qx": "Pushes the coefficient of i.",
  "hexcasting.action.complexhex:qy": "Quaterionic Prfn.: j",
  "complexhex.page.quaternionics.qy": "Pushes the coefficient of j.",
  "hexcasting.action.complexhex:qz": "Quaterionic Prfn: k",
  "complexhex.page.quaternionics.qz": "Pushes the coefficient of k.",
  "hexcasting.action.complexhex:qinvert": "Quaternionic Inverse",
  "complexhex.page.quaternionics.qinvert": "Negates the coefficients of i, j, & k",
  "hexcasting.action.complexhex:quattomat": "Matrixification",
  "complexhex.page.quaternionics.quattomat": "Pushes a matrix that (should) represent the same rotation as the quaternion",
  "hexcasting.action.complexhex:mattoquat": "Quaterniation",
  "complexhex.page.quaternionics.mattoquat": "Pushes a quaternion that (should) reperesent the same rotation as the matrix",
  "hexcasting.action.complexhex:axisangle": "Axis Angle Distillation",
  "complexhex.page.quaternionics.axisangle": "Pushes a quaternion that reperesents a rotation by the given angle num radias around the given vector.",

  "complexhex.tooltip.bubble_contents": "{%s}",
  "complexhex.entry.bubble": "Bubbles",
  "hexcasting.action.complexhex:bubble": "Bubbles' Purification",
  "complexhex.page.bubble": "Pushes a Bubbled Iota, which when popped via execution (by hermes or the likes), will push the contained iota to the stack.",

  "complexhex.entry.bits": "BIT Manipulation",
  "complexhex.page.bitexplainer": "These are patterns to manipulate Block, Item, and Text Displays (BITs for short).$(br2)Oddly, Scout's Distillation does not seem to work on these, thus I must depend on Entity Prfn. or Zone Dstn.",
  "hexcasting.action.complexhex:summonblockdisplay": "Summon Block Display",
  "complexhex.page.summonblockdisplay": "Summons a Block Display entity at the given position, displaying the given block. (The string must be the internal name i.e \"minecraft:dirt\", not \"Dirt\").$(br)Costs about a $(l:items/amethyst)$(item)Charged Amethyst/$",
  "hexcasting.action.complexhex:summonitemdisplay": "Summon Item Display",
  "complexhex.page.summonitemdisplay": "Summons an Item Display entity at the given position, displaying the given item (The string must be the internal name i.e \"minecraft:stick\", not \"Stick\").$(br)Costs about a $(l:items/amethyst)$(item)Charged Amethyst/$",
  "hexcasting.action.complexhex:summontextdisplay": "Summon Text Display",
  "complexhex.page.summontextdisplay": "Summons a Text Display entity at the given position, displaying the given string. Costs about a $(l:items/amethyst)$(item)Charged Amethyst/$",
  "hexcasting.action.complexhex:get_entity/bit": "Entity Purification: BIT",
  "complexhex.page.get_entity/bit": "Transform the position on the stack into the BIT at that location (or $(l:casting/influences)$(thing)Null/$ if there isn't one)",
  "hexcasting.action.complexhex:zone_entity/bit": "Zone Distillation: BIT",
  "complexhex.page.zone_entity/bit": "Take a position and a maximum distance on the stack, and combine them into a list of BIT's near the position.",
  "hexcasting.action.complexhex:zone_entity/not_bit": "Zone Distillation: Not BIT",
  "complexhex.page.zone_entity/not_bit": "Take a position and a maximum distance on the stack, and combine them into a list of non-BIT's near the position.",
  "hexcasting.action.complexhex:translatebit": "Translate BIT",
  "complexhex.page.translatebit": "Moves the BIT by the given offset.$(br)(Compounds with multiple uses!)$(br)Costs an amount of $(l:items/amethyst)$(item)Amethyst Dust/$ equal to the length of the offset vector.",
  "hexcasting.action.complexhex:rotatebit": "Rotate BIT",
  "complexhex.page.rotatebit": "Rotates the BIT by the given Quaternion.$(br)(Does not compound with multiple uses!)$(br)Costs about one $(l:items/amethyst)$(item)Amethyst Dust/$.",
  "hexcasting.action.complexhex:scalebit": "Scale BIT",
  "complexhex.page.scalebit": "Scales the BIT by the given vector.$(br)(Does not Compound with multiple uses!)$(br)Costs an amount of $(l:items/amethyst)$(item)Amethyst Dust/$ equal to the length of the scale vector",
  "hexcasting.action.complexhex:killbit": "Kill BIT",
  "complexhex.page.killbit": "Kills & removes the given BIT.$(br2)Costs about one $(l:items/amethyst)$(item)Amethyst Dust/$.",

  "complexhex.mishap.bad_string.blockid": "a blockID",
  "complexhex.mishap.bad_string.itemid": "an itemID",
  "hexcasting.mishap.bad_string": "needs %s but got %s",
  "hexcasting.mishap.invalid_value.class.quaternion": "a quaternion",
  "hexcasting.mishap.invalid_value.class.complexnumber": "a complex number",
  "hexcasting.mishap.invalid_value.class.bubble": "a bubble",
  "hexcasting.mishap.invalid_value.class.bit": "a BIT",
  "hexcasting.mishap.bad_item.bit": "a BIT"
}
