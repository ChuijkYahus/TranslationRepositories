{
  "complexhex.entry.complexities": "Complexities",
  "hexcasting.action.book.complexhex:const/complex/i": "Constant Imagination",
  "complexhex.page.complexities.const.i": "Pushes 0 + 1i to the stack.",
  "hexcasting.action.book.complexhex:const/complex/1": "Constant Realisation",
  "complexhex.page.complexities.const.1": "Pushes 1 + 0i to the stack.",
  "complexhex.page.complexities.add": "Preforms Addition, num will be treated as num + 0i.",
  "complexhex.page.complexities.sub": "Preforms Subtraction, num will be treated as num + 0i.",
  "complexhex.page.complexities.mul": "Preforms Scalar Multiplication.",
  "complexhex.page.complexities.div": "Preforms Scalar Division.",
  "complexhex.page.complexities.abs": "Pushes the Argument (the length).",
  "hexcasting.action.book.complexhex:cmul": "Complex Multiplication",
  "complexhex.page.complexities.cmul": "Preforms Complex Multiplication.",
  "hexcasting.action.book.complexhex:real": "Realising Complexities",
  "complexhex.page.complexities.real": "Pushes the real coefficient.",
  "hexcasting.action.book.complexhex:imaginary": "Imagining Complexities",
  "complexhex.page.complexities.imaginary": "Pushes the imaginary coefficient.",
  "hexcasting.action.book.complexhex:conjugate": "Conjugation Prfn.",
  "complexhex.page.complexities.conjugate": "Negates the imaginary coefficient of the topmost iota",

  "complexhex.entry.quaternionics": "Quaternionics",
  "hexcasting.action.book.complexhex:qmake": "Quaternionic Exal.",
  "complexhex.page.quaternionics.qmake": "Pushes a Quaternion with num as the real coefficient and the vector's x, y, & z as the coefficients of i, j & k respectively.",
  "hexcasting.action.book.complexhex:qunmake": "Quaternionic Dntg.",
  "complexhex.page.quaternionics.qunmake": "Pushes the real coefficient and a vector where the x, y, & z components are the coefficients of i, j, & k respectively.",
  "hexcasting.action.book.complexhex:const/quaternion/1": "Quaternionic Rfln.: 1",
  "complexhex.page.quaternionics.const.1": "Pushes 1 + 0i + 0j + 0k to the stack.",
  "hexcasting.action.book.complexhex:const/quaternion/i": "Quaternionic Rfln.: i",
  "complexhex.page.quaternionics.const.i": "Pushes 0 + 1i + 0j + 0k to the stack.",
  "hexcasting.action.book.complexhex:const/quaternion/j": "Quaternionic Rfln: j",
  "complexhex.page.quaternionics.const.j": "Pushes 0 + 0i + 1j + 0k to the stack.",
  "hexcasting.action.book.complexhex:const/quaternion/k": "Quaternionic Rfln: k",
  "complexhex.page.quaternionics.const.k": "Pushes 0 + 0i + 0j + 1k to the stack.",
  "complexhex.page.quaternionics.add": "Preforms Addition",
  "complexhex.page.quaternionics.sub": "Preforms Subtraction",
  "complexhex.page.quaternionics.mul": "Preforms Scalar Multiplication.",
  "complexhex.page.quaternionics.div": "Preforms Scalar Division.",
  "complexhex.page.quaternionics.abs": "Pushes the Argument (the length).",
  "hexcasting.action.book.complexhex:qmul": "Quaternionic Multiplication",
  "complexhex.page.quaternionics.qmul": "Preforms a Hamiltonian Multiplication.",
  "hexcasting.action.book.complexhex:qa": "Quaterionic Prfn.: 1",
  "complexhex.page.quaternionics.qa": "Pushes the coefficient of 1.",
  "hexcasting.action.book.complexhex:qb": "Quaterionic Prfn.: i",
  "complexhex.page.quaternionics.qb": "Pushes the coefficient of i.",
  "hexcasting.action.book.complexhex:qc": "Quaterionic Prfn.: j",
  "complexhex.page.quaternionics.qc": "Pushes the coefficient of j.",
  "hexcasting.action.book.complexhex:qd": "Quaterionic Prfn: k",
  "complexhex.page.quaternionics.qd": "Pushes the coefficient of k.",
  "hexcasting.action.complexhex:qinvert": "Quaternionic Inverse.",
  "complexhex.page.quaternionics.qinvert": "Negates the coefficients of i, j, & k",
  "hexcasting.action.complexhex:quattomat": "Matrixification",
  "complexhex.page.quaternionics.quattomat": "Pushes a matrix that (should) represent the same rotation as the quaternion",
  "hexcasting.action.complexhex:mattoquat": "Quaterniation",
  "complexhex.page.quaternionics.mattoquat": "Pushes a quaternion that (should) reperesent the same rotation as the matrix"
}
